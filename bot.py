import os
import logging
from io import BytesIO
from typing import List, Dict
import asyncio
from datetime import datetime

# Telegram bot imports
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# Image processing imports
from PIL import Image, ImageEnhance, ImageFilter
from fpdf import FPDF

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8346818812:AAEhBj-Uvf3RgvoJzrW7zbqFQ0manE1kSvs"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
MAX_PHOTOS = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ –æ–¥–Ω–æ–º PDF
MAX_FILE_SIZE = 20 * 1024 * 1024  # 20MB

class PDFConverter:
    def __init__(self):
        self.user_photos: Dict[int, List[bytes]] = {}
        
    def add_photo(self, user_id: int, photo_data: bytes) -> int:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å"""
        if user_id not in self.user_photos:
            self.user_photos[user_id] = []
        
        self.user_photos[user_id].append(photo_data)
        return len(self.user_photos[user_id])
    
    def clear_photos(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_photos:
            del self.user_photos[user_id]
    
    def get_photo_count(self, user_id: int) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return len(self.user_photos.get(user_id, []))
    
    def enhance_image(self, image: Image.Image, enhancement_type: str = None) -> Image.Image:
        """–£–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if enhancement_type == "sharpen":
                return image.filter(ImageFilter.SHARPEN)
            elif enhancement_type == "brightness":
                enhancer = ImageEnhance.Brightness(image)
                return enhancer.enhance(1.2)
            elif enhancement_type == "contrast":
                enhancer = ImageEnhance.Contrast(image)
                return enhancer.enhance(1.1)
            return image
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return image
    
    def create_pdf(self, user_id: int, page_format: str = "A4", 
                  orientation: str = "portrait", quality: str = "high",
                  enhancement: str = None) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç PDF –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_photos or not self.user_photos[user_id]:
            raise ValueError("–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PDF
        if orientation == "landscape":
            pdf = FPDF("L", "mm", page_format)
        else:
            pdf = FPDF("P", "mm", page_format)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page_format == "A4":
            page_width, page_height = (297, 210) if orientation == "landscape" else (210, 297)
        elif page_format == "A3":
            page_width, page_height = (420, 297) if orientation == "landscape" else (297, 420)
        else:  # Letter
            page_width, page_height = (279, 216) if orientation == "landscape" else (216, 279)
        
        margin = 10
        img_width = page_width - 2 * margin
        img_height = page_height - 2 * margin
        
        for i, photo_data in enumerate(self.user_photos[user_id]):
            try:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = Image.open(BytesIO(photo_data))
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
                if enhancement:
                    image = self.enhance_image(image, enhancement)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if image.mode != "RGB":
                    image = image.convert("RGB")
                
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                img_ratio = image.width / image.height
                target_ratio = img_width / img_height
                
                if img_ratio > target_ratio:
                    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∏—Ä–µ - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
                    new_width = img_width
                    new_height = img_width / img_ratio
                else:
                    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—à–µ - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
                    new_height = img_height
                    new_width = img_height * img_ratio
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å —É—á–µ—Ç–æ–º DPI
                dpi_factor = 3.779  # 300 DPI / 72 DPI
                image = image.resize(
                    (int(new_width * dpi_factor), int(new_height * dpi_factor)), 
                    Image.Resampling.LANCZOS if quality == "high" else Image.Resampling.BILINEAR
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
                img_buffer = BytesIO()
                image.save(img_buffer, format="JPEG", 
                          quality=95 if quality == "high" else 75,
                          optimize=True)
                img_buffer.seek(0)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ PDF
                pdf.add_page()
                
                # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                x = (page_width - new_width) / 2
                y = (page_height - new_height) / 2
                
                pdf.image(img_buffer, x, y, new_width, new_height)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i}: {e}")
                continue
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º PDF –∫–∞–∫ bytes
        return bytes(pdf.output())

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
converter = PDFConverter()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üî• **PDF CONVERTER BOT** üî•

–ú–æ—â–Ω—ã–π –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ PDF!

üì∏ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –≤ –æ–¥–∏–Ω PDF
‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü (A4, A3, Letter)
‚Ä¢ –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –∏ –∞–ª—å–±–æ–º–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ PDF

üöÄ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–¥–æ 50 —à—Ç—É–∫)
2. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å PDF" –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ
3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
4. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª!

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏
"""
    
    keyboard = [
        [InlineKeyboardButton("üìö –°–ø—Ä–∞–≤–∫–∞", callback_data="help"),
         InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, parse_mode='Markdown', reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ **–ü–û–î–†–û–ë–ù–ê–Ø –°–ü–†–ê–í–ö–ê**

üî∏ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –°–ø—Ä–∞–≤–∫–∞
/clear - –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ
/status - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ

üî∏ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ JPEG, JPG, PNG, WEBP
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20MB
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: 50

üî∏ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ PDF:**
üìÑ –§–æ—Ä–º–∞—Ç—ã: A4, A3, Letter
üîÑ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è, –ê–ª—å–±–æ–º–Ω–∞—è
‚ö° –ö–∞—á–µ—Å—Ç–≤–æ: –í—ã—Å–æ–∫–æ–µ, –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
‚ú® –£–ª—É—á—à–µ–Ω–∏—è: –†–µ–∑–∫–æ—Å—Ç—å, –Ø—Ä–∫–æ—Å—Ç—å, –ö–æ–Ω—Ç—Ä–∞—Å—Ç

üî∏ **–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
2. –ö–∞–∂–¥–∞—è —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å
3. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å PDF" –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
4. –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
5. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª

üí° **–°–æ–≤–µ—Ç:** –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –∏—Ö –≤ PDF!
"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(help_text, parse_mode='Markdown', reply_markup=reply_markup)

async def clear_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    converter.clear_photos(user_id)
    
    await update.message.reply_text(
        "üóëÔ∏è –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—á–∏—â–µ–Ω—ã! –ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–æ–≤—ã–µ.",
        reply_markup=get_main_keyboard()
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ"""
    user_id = update.effective_user.id
    count = converter.get_photo_count(user_id)
    
    status_text = f"""
üìä **–¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–°**

üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: **{count}**
üìù –ú–∞–∫—Å–∏–º—É–º: {MAX_PHOTOS}
üíæ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE // (1024*1024)}MB

{"üü¢ –ì–æ—Ç–æ–≤ –∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!" if count > 0 else "üî¥ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"}
"""
    
    await update.message.reply_text(status_text, parse_mode='Markdown', reply_markup=get_main_keyboard())

def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = [
        [InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å PDF", callback_data="create_pdf")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
         InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear")],
        [InlineKeyboardButton("üìö –°–ø—Ä–∞–≤–∫–∞", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    current_count = converter.get_photo_count(user_id)
    if current_count >= MAX_PHOTOS:
        await update.message.reply_text(
            f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π ({MAX_PHOTOS})!\n"
            f"–°–æ–∑–¥–∞–π—Ç–µ PDF –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ."
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
        photo = update.message.photo[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if photo.file_size and photo.file_size > MAX_FILE_SIZE:
            await update.message.reply_text(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE // (1024*1024)}MB"
            )
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file = await context.bot.get_file(photo.file_id)
        photo_bytes = await file.download_as_bytearray()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
        count = converter.add_photo(user_id, bytes(photo_bytes))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        message_text = f"""
‚úÖ **–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!**

üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: **{count}** / {MAX_PHOTOS}
üìè –†–∞–∑–º–µ—Ä: {len(photo_bytes) / 1024:.1f} KB

{"üü¢ –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å PDF!" if count < MAX_PHOTOS else "üî¥ –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –°–æ–∑–¥–∞–π—Ç–µ PDF."}
"""
        
        await update.message.reply_text(
            message_text, 
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    data = query.data
    
    if data == "help":
        await help_command(update, context)
    
    elif data == "back_to_start":
        await start(update, context)
    
    elif data == "status":
        count = converter.get_photo_count(user_id)
        status_text = f"""
üìä **–°–¢–ê–¢–£–° –ó–ê–ì–†–£–ó–ö–ò**

üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: **{count}** / {MAX_PHOTOS}
{"üü¢ –ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é PDF!" if count > 0 else "üî¥ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"}
"""
        await query.edit_message_text(status_text, parse_mode='Markdown', reply_markup=get_main_keyboard())
    
    elif data == "clear":
        converter.clear_photos(user_id)
        await query.edit_message_text(
            "üóëÔ∏è –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—á–∏—â–µ–Ω—ã!", 
            reply_markup=get_main_keyboard()
        )
    
    elif data == "create_pdf":
        count = converter.get_photo_count(user_id)
        if count == 0:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = [
            [InlineKeyboardButton("üìÑ A4", callback_data="format_A4"),
             InlineKeyboardButton("üìÑ A3", callback_data="format_A3"),
             InlineKeyboardButton("üìÑ Letter", callback_data="format_Letter")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò PDF**\n\nüì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {count}\n\nüìÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    elif data.startswith("format_"):
        format_type = data.split("_")[1]
        context.user_data['format'] = format_type
        
        keyboard = [
            [InlineKeyboardButton("üì± –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è", callback_data="orient_portrait"),
             InlineKeyboardButton("üñ•Ô∏è –ê–ª—å–±–æ–º–Ω–∞—è", callback_data="orient_landscape")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="create_pdf")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üîÑ **–û–†–ò–ï–ù–¢–ê–¶–ò–Ø** ({format_type})\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    elif data.startswith("orient_"):
        orientation = data.split("_")[1]
        context.user_data['orientation'] = orientation
        
        keyboard = [
            [InlineKeyboardButton("‚ö° –í—ã—Å–æ–∫–æ–µ", callback_data="quality_high"),
             InlineKeyboardButton("üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ", callback_data="quality_standard")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"format_{context.user_data.get('format', 'A4')}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ú® **–ö–ê–ß–ï–°–¢–í–û**\n\n–§–æ—Ä–º–∞—Ç: {context.user_data.get('format', 'A4')}\n"
            f"–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {'–ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è' if orientation == 'portrait' else '–ê–ª—å–±–æ–º–Ω–∞—è'}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ PDF:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    elif data.startswith("quality_"):
        quality = data.split("_")[1]
        context.user_data['quality'] = quality
        
        keyboard = [
            [InlineKeyboardButton("üåü –ë–µ–∑ —É–ª—É—á—à–µ–Ω–∏–π", callback_data="enhance_none"),
             InlineKeyboardButton("üî™ –†–µ–∑–∫–æ—Å—Ç—å", callback_data="enhance_sharpen")],
            [InlineKeyboardButton("‚òÄÔ∏è –Ø—Ä–∫–æ—Å—Ç—å", callback_data="enhance_brightness"),
             InlineKeyboardButton("üé≠ –ö–æ–Ω—Ç—Ä–∞—Å—Ç", callback_data="enhance_contrast")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"orient_{context.user_data.get('orientation', 'portrait')}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üé® **–£–õ–£–ß–®–ï–ù–ò–Ø**\n\n"
            f"–§–æ—Ä–º–∞—Ç: {context.user_data.get('format', 'A4')}\n"
            f"–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {'–ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è' if context.user_data.get('orientation') == 'portrait' else '–ê–ª—å–±–æ–º–Ω–∞—è'}\n"
            f"–ö–∞—á–µ—Å—Ç–≤–æ: {'–í—ã—Å–æ–∫–æ–µ' if quality == 'high' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    elif data.startswith("enhance_"):
        enhancement = data.split("_")[1] if data != "enhance_none" else None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ PDF
        await query.edit_message_text("üîÑ **–°–æ–∑–¥–∞—é PDF...** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        try:
            pdf_data = converter.create_pdf(
                user_id=user_id,
                page_format=context.user_data.get('format', 'A4'),
                orientation=context.user_data.get('orientation', 'portrait'),
                quality=context.user_data.get('quality', 'high'),
                enhancement=enhancement
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"photos_to_pdf_{timestamp}.pdf"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=BytesIO(pdf_data),
                filename=filename,
                caption=f"""
‚úÖ **PDF —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!**

üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {converter.get_photo_count(user_id)}
üìÑ –§–æ—Ä–º–∞—Ç: {context.user_data.get('format', 'A4')}
üîÑ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {'–ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è' if context.user_data.get('orientation') == 'portrait' else '–ê–ª—å–±–æ–º–Ω–∞—è'}
‚ö° –ö–∞—á–µ—Å—Ç–≤–æ: {'–í—ã—Å–æ–∫–æ–µ' if context.user_data.get('quality') == 'high' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'}
üé® –£–ª—É—á—à–µ–Ω–∏–µ: {enhancement or '–ù–µ—Ç'}
üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(pdf_data) / 1024:.1f} KB

üöÄ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!
""",
                parse_mode='Markdown'
            )
            
            # –û—á–∏—â–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            converter.clear_photos(user_id)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            await query.delete_message()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF: {e}")
            await query.edit_message_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF!\n\n–û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_main_keyboard()
            )
    
    elif data == "back_to_main":
        count = converter.get_photo_count(user_id)
        await query.edit_message_text(
            f"üè† **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ**\n\nüì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {count}",
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–µ —Ñ–æ—Ç–æ)"""
    await update.message.reply_text(
        "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG, PNG –∏–ª–∏ WEBP."
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ PDF Converter Bot...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π BOT_TOKEN!")
        print("üí° –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
        print("üîß –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª bot.py –∏ –∑–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN_HERE' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("clear", clear_photos))
        app.add_handler(CommandHandler("status", status))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        app.add_handler(CallbackQueryHandler(handle_callback))
        
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
        print("üì± –ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å polling
        app.run_polling(drop_pending_updates=True)
        
    except telegram.error.InvalidToken:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –æ—Ç @BotFather")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print("\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ:")
        print("1. –û–±–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: pip install --upgrade python-telegram-bot")
        print("2. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install python-telegram-bot pillow fpdf2")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

if __name__ == '__main__':
    main()